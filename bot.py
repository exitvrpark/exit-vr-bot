import os, asyncio, aiosqlite
from datetime import datetime
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)

BOT_TOKEN = os.getenv("7997746340:AAFn0_Yy7vd-n5oMM9Cjl_Jg9HBbxgx2X8A")
CHANNEL_USERNAME = os.getenv("@exit_vr")
ADMIN_IDS = {1290147421}


DB = "exit_vr.sqlite"
ASK_NAME, ASK_AGE, ASK_PHONE = range(3)

# ---------- DB ----------
async def init_db():
    async with aiosqlite.connect(DB) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users(
            chat_id INTEGER PRIMARY KEY,
            name TEXT,
            age INTEGER,
            phone TEXT,
            points INTEGER DEFAULT 0,
            subscribed INTEGER DEFAULT 0,
            got_signup_bonus INTEGER DEFAULT 0,
            created_at TEXT
        )""")
        await db.commit()

async def get_user(chat_id):
    async with aiosqlite.connect(DB) as db:
        cur = await db.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
        return await cur.fetchone()

async def upsert_user(chat_id, **fields):
    keys = ", ".join(fields.keys())
    placeholders = ", ".join("?" for _ in fields)
    values = list(fields.values())
    async with aiosqlite.connect(DB) as db:
        # insert or update
        exist = await db.execute("SELECT chat_id FROM users WHERE chat_id=?", (chat_id,))
        if await exist.fetchone():
            sets = ", ".join(f"{k}=?" for k in fields)
            await db.execute(f"UPDATE users SET {sets} WHERE chat_id=?", (*values, chat_id))
        else:
            await db.execute(
                f"INSERT INTO users(chat_id,{keys},created_at) VALUES (?,?,?,?)".replace("?,?,?,?", "?," + ",".join("?"*len(fields)) + ",?"),
                (chat_id, *values, datetime.utcnow().isoformat())
            )
        await db.commit()

async def add_points(chat_id, amount):
    async with aiosqlite.connect(DB) as db:
        await db.execute("UPDATE users SET points = COALESCE(points,0) + ? WHERE chat_id=?",(amount,chat_id))
        await db.commit()

# ---------- Utils ----------
def is_admin(user_id:int)->bool:
    return user_id in ADMIN_IDS

async def check_subscription(context: ContextTypes.DEFAULT_TYPE, user_id:int)->bool:
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ("member","administrator","creator")
    except Exception:
        # –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ chat_id –∫–∞–Ω–∞–ª–∞
        return False

# ---------- Handlers ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await init_db()
    chat_id = update.effective_chat.id
    user = await get_user(chat_id)
    if user:
        await update.message.reply_text("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ EXIT VR! –ù–∞–ø–∏—à–∏—Ç–µ /–ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ /–±–∞–ª–∞–Ω—Å.")
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text.strip()[:64]
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return ASK_AGE

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text.strip())
    except:
        return await update.message.reply_text("–ù—É–∂–Ω–∞ —Ü–∏—Ñ—Ä–∞. –°–∫–æ–ª—å–∫–æ –ª–µ—Ç?")
    context.user_data["age"] = age
    kb = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    await update.message.reply_text(
        "–û—Å—Ç–∞–ª—Å—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–ª—è –±—Ä–æ–Ω–∏ –∏ –±–æ–Ω—É—Å–æ–≤):",
        reply_markup=ReplyKeyboardMarkup(kb, one_time_keyboard=True, resize_keyboard=True)
    )
    return ASK_PHONE

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()
    await upsert_user(update.effective_chat.id,
                      name=context.user_data["name"],
                      age=context.user_data["age"],
                      phone=phone)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å 1000 –±–æ–Ω—É—Å–æ–≤:\n" + CHANNEL_USERNAME,
                                    reply_markup=ReplyKeyboardRemove())
    await update.message.reply_text("–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /–ø—Ä–æ–≤–µ—Ä–∫–∞")
    return ConversationHandler.END

async def check_sub(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = await get_user(chat_id)
    if not user:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    subscribed = await check_subscription(context, chat_id)
    if not subscribed:
        return await update.message.reply_text("–ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–≤—Ç–æ—Ä–∏ /–ø—Ä–æ–≤–µ—Ä–∫–∞.")
    # –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    await upsert_user(chat_id, subscribed=1)
    # –±–æ–Ω—É—Å 1000 ‚Äî –æ–¥–∏–Ω —Ä–∞–∑
    got_bonus = user[6] if user else 0
    if not got_bonus:
        await add_points(chat_id, 1000)
        await upsert_user(chat_id, got_signup_bonus=1)
        await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! +1000 –±–æ–Ω—É—Å–æ–≤ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É üéâ\n–ö–æ–º–∞–Ω–¥–∞ /–±–∞–ª–∞–Ω—Å –ø–æ–∫–∞–∂–µ—Ç —Å—É–º–º—É.")
    else:
        await update.message.reply_text("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ë–æ–Ω—É—Å —É–∂–µ –Ω–∞—á–∏—Å–ª—è–ª–∏ —Ä–∞–Ω–µ–µ.")
        
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user = await get_user(chat_id)
    if not user:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /start.")
    points = user[4] or 0
    await update.message.reply_text(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {points} –±–æ–Ω—É—Å–æ–≤ (1 –±–æ–Ω—É—Å = 1 ‚ÇΩ).")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = await get_user(update.effective_chat.id)
    if not user:
        return await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /start.")
    _, chat_id, name, age, phone, points, subscribed, got_bonus, created_at = (
        None, user[0], user[1], user[2], user[3], user[4], user[5], user[6], user[7]
    )
    sub = "–¥–∞" if subscribed else "–Ω–µ—Ç"
    await update.message.reply_text(
        f"–ü—Ä–æ—Ñ–∏–ª—å:\n–ò–º—è: {name}\n–í–æ–∑—Ä–∞—Å—Ç: {age}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ü–æ–¥–ø–∏—Å–∫–∞: {sub}\n–ë–æ–Ω—É—Å—ã: {points}\n–° –Ω–∞–º–∏ —Å: {created_at}"
    )

# ----- Admin: –Ω–∞—á–∏—Å–ª–∏—Ç—å/—Å–ø–∏—Å–∞—Ç—å/—Ä–∞—Å—Å—ã–ª–∫–∞ -----
async def addpoints_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) < 2:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /–Ω–∞—á–∏—Å–ª–∏—Ç—å <chat_id> <—Å—É–º–º–∞>")
    chat_id = int(context.args[0]); amount = int(context.args[1])
    await add_points(chat_id, amount)
    await update.message.reply_text(f"–ù–∞—á–∏—Å–ª–∏–ª {amount} –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}.")

async def deduct_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    if len(context.args) < 2:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /—Å–ø–∏—Å–∞—Ç—å <chat_id> <—Å—É–º–º–∞>")
    chat_id = int(context.args[0]); amount = int(context.args[1])
    await add_points(chat_id, -amount)
    await update.message.reply_text(f"–°–ø–∏—Å–∞–ª {amount} –±–æ–Ω—É—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        return
    text = " ".join(context.args).strip()
    if not text:
        return await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /broadcast –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    # –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    async with aiosqlite.connect(DB) as db:
        cur = await db.execute("SELECT chat_id FROM users")
        rows = await cur.fetchall()
    sent = 0
    for (cid,) in rows:
        try:
            await context.bot.send_message(cid, text)
            sent += 1
        except: pass
    await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    reg = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_AGE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
            ASK_PHONE:[MessageHandler(filters.CONTACT | (filters.TEXT & ~filters.COMMAND), ask_phone)],
        },
        fallbacks=[]
    )
    app.add_handler(reg)
    app.add_handler(CommandHandler("–ø—Ä–æ–≤–µ—Ä–∫–∞", check_sub))
    app.add_handler(CommandHandler("–±–∞–ª–∞–Ω—Å", balance))
    app.add_handler(CommandHandler("–ø—Ä–æ—Ñ–∏–ª—å", profile))

    # admin
    app.add_handler(CommandHandler("–Ω–∞—á–∏—Å–ª–∏—Ç—å", addpoints_cmd))
    app.add_handler(CommandHandler("—Å–ø–∏—Å–∞—Ç—å", deduct_cmd))
    app.add_handler(CommandHandler("broadcast", broadcast))

    app.run_polling()

if __name__ == "__main__":
    asyncio.run(init_db())
    main()
